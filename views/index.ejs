<!doctype html>
<html>
<head>

	<link rel="stylesheet" href="stylesheets/style.css" />
  <link href="css/bootstrap.min.css" rel="stylesheet">
  
</head>
<body>
<div id = "header" class = "arcadeHeader">
<ul> 
<li> <a href = "/login">Login</a></li>
<li> <a href = "/profile">Profile</a></li>
<li> <a href = "/signup">Sign Up</a></li>
</ul>
</div>
<div class = "container-flud" id = "centered">
  <img src="arcadewarrior3.png" style = "width:280px;height:280px;top:-150px;position:relative;"/>
</div>
<div id = "wrapper" style = "background-color: black;">
<div id = "container">
<div id = "game_swf">
<canvas id="ctx" width = "800" height="600" style="background-color : white;  padding-left: 0;
    padding: 0;
    margin: auto;
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;"></canvas> 
    </div>
    </div>
    </div>
    <p id = 'txt'>
      Welcome
      <%= user.local.email %>
      </p>
    <button type = "button" id = "Playbutton" onClick = "mySocketLoad()">Play Now </button>
</body>
</html>

<!-- 
  Import script for socket.io and starting communicating to server
  !--> 
<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>

<script>
  // Creats socket connection to server
  function mySocketLoad() {
    //var LocalStrategy   = require('passport-local').Strategy;
    //var User       		= require('../app/models/user');
  document.getElementById('Playbutton').remove();
  var ctx = document.getElementById("ctx").getContext("2d");
  ctx.font = '30px Arial';
  var socket = io.connect();

  var uniqueId = Math.random();
  var game = "none";

  // For boxkick
  var boxKickBG = new Image();
  boxKickBG.src = "bkbg.png";

  //For dodgeThis
  var thingToDodge = new Image();
  thingToDodge.src = "thingToDodge.png";

  var thingToDodgeBG = new Image();
  thingToDodgeBG.src = "thingToDodgeBG.png";

  //For Catch
  var catchItem = new Image();
  catchItem.src = "catchItem.png";

  var catchBG = new Image();
  catchBG.src = "catchBG.png";

  // Update game type
  socket.on('gameType', function(data){
    game = data.type;
  });

  socket.on('instructions', function(data){
    ctx.clearRect(0,0,800,600);
    ctx.fillText("Game: " + data.type,130,50);
    ctx.fillText(data.message,130,100);
  });

  socket.emit('id', {id:uniqueId});
  // Do this stuff when in queue
  socket.on('queue', function(){
  
    ctx.clearRect(0,0,800,600);
    ctx.fillText("You are in queue.",150,100);
  });
  // Do this stuff while waiting for both players to be ready
  socket.on('waiting', function(data){
    ctx.clearRect(0,0,800,600);
    var p1Ready = data.p1;
    var p2Ready = data.p2;

    ctx.fillText("Press space to ready up.",200,100);
    if(p1Ready == true && p2Ready == false){
      ctx.fillText("You: ready",50,200);
      ctx.fillText("Opponent: not ready",50,300);
    } else if(p1Ready == false && p2Ready == false){
      ctx.fillText("You: not ready",50,200);
      ctx.fillText("Opponent: not ready",50,300);
    } else if(p1Ready == false && p2Ready == true){
      ctx.fillText("You: not ready",50,200);
      ctx.fillText("Opponent: ready",50,300);
    }
    
  });
  // Drawing related things
  socket.on('endMatch', function(data){
    ctx.clearRect(0,0,800,600);
    var message = data.winner + " won the entire match!";
    if (data.winner == "You") {
      socket.emit('ivewon');
    }
    ctx.fillText(message,200,300);
    socket.disconnect();
  });

  socket.on('pauseOn', function(data){
    var message = data.winner + " won the minigame!";
    ctx.fillText(message,200,300);
  });

  socket.on('playerLeft', function(){
    ctx.fillText("Other player has left. Sorry.",100,500);
    socket.disconnect();
    document.getElementById('Playbutton').add();

  });

  socket.on('clearScreen', function(){
    ctx.clearRect(0,0,800,600);
  });

  socket.on('newPosition', function(data){
    if(game == "Catch"){
      ctx.clearRect(0,0,800,600);
      ctx.drawImage(catchBG,0,0);
      var catchArray = [];
      // For each player data
      for(var i = 0; i < data.length; i++){
        var img = new Image();
        if(data[i].uniqueId === uniqueId){
          img.src = "p1.png";
          catchArray = data[i].catchArray;
        } else {
          img.src = "p2.png";
        }
        // Draw image
        ctx.drawImage(img,data[i].x,data[i].y);
        ctx.fillText(data[i].catchNum.toString(), data[i].x+30, data[i].y+90);
      }

      // Draw the clients things to catch
      // No need to draw the Opponent's things to catch
      for(var i = 0; i < catchArray.length; i++){
        ctx.drawImage(catchItem,catchArray[i].x,catchArray[i].y);
      }

    } else if(game == "BoxKick"){
      ctx.clearRect(0,0,800,600);
      ctx.drawImage(boxKickBG,0,0);
      for(var i = 0; i < data.length; i++){
        var img = new Image();
        if(data[i].uniqueId === uniqueId){
          img.src = "p1.png";
        } else {
          img.src = "p2.png";
        }
        // Draw image
        ctx.drawImage(img,data[i].x,data[i].y);
      }
    } else if(game == "Dodge This"){
      ctx.clearRect(0,0,800,600);
      ctx.drawImage(thingToDodgeBG,0,0);
      var thingsToDodge = [];
      // For each player data
      for(var i = 0; i < data.length; i++){
        var img = new Image();
        if(data[i].uniqueId === uniqueId){
          img.src = "p1.png";
          thingsToDodge = data[i].dodgeArray;
        } else {
          img.src = "p2.png";
        }
        // Draw image
        ctx.drawImage(img,data[i].x,data[i].y);
      }

      // Draw the clients things to dodge
      // No need to draw the Opponent's things to dodge
      //thingsToDodge = thisClient.dodgeArray;
      for(var i = 0; i < thingsToDodge.length; i++){
        ctx.drawImage(thingToDodge,thingsToDodge[i].x,thingsToDodge[i].y);
      }
      
    }

    
  });

  // Detects key presses
  document.onkeydown = function(event){
    if(event.keyCode === 68){
    //socket.emit('debug', "Pressing D");
    socket.emit('keyPress', {inputId:'right', state:true});
      // D key
    } else if(event.keyCode === 83){
      // S key
      socket.emit('keyPress', {inputId:'down', state:true});
    } else if(event.keyCode === 65){
      // A key
      socket.emit('keyPress', {inputId:'left', state:true});
    } else if(event.keyCode === 87){
      // W key
      socket.emit('keyPress', {inputId:'up', state:true});
    } else if(event.keyCode === 32){
      // Space key
      socket.emit('ready');
    }
  }
  // Detects when keys are not pressed
  document.onkeyup = function(event){
    if(event.keyCode === 68){
      // D key
      socket.emit('keyPress', {inputId:'right', state:false});
    } else if(event.keyCode === 83){
      // S key
      socket.emit('keyPress', {inputId:'down', state:false});
    } else if(event.keyCode === 65){
      // A key
      socket.emit('keyPress', {inputId:'left', state:false});
    } else if(event.keyCode === 87){
      // W key
      socket.emit('keyPress', {inputId:'up', state:false});
    } else if(event.keyCode === 32){
      // Space key
    }
  }
  }


  
  </script>
  <script src="js/Minigame.js"></script>
  <script src="js/BoxKick.js"></script>